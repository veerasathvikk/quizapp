<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/services/otpService.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/services/otpService.js" />
              <option name="originalContent" value="const bcrypt = require('bcrypt');&#10;const pool = require('../config/db');&#10;const { generateOTP } = require('../utils/otpGenerator');&#10;const { sendEmail } = require('../utils/email');&#10;&#10;async function requestOTP(email) {&#10;  const otp = generateOTP();&#10;  const otpHash = await bcrypt.hash(otp, 10);&#10;  const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 minutes&#10;&#10;  await pool.query(&#10;    `INSERT INTO otps (email, otp_hash, expires_at) VALUES ($1, $2, $3)`,&#10;    [email.toLowerCase(), otpHash, expiresAt]&#10;  );&#10;&#10;  // Send OTP via email (disabled for testing)&#10;  // await sendEmail(email, 'Your Quiz App OTP', `Your OTP is: ${otp} (valid for 5 minutes)`); // old code&#10;  // For testing, print OTP to console&#10;  console.log(`OTP for ${email}: ${otp}`);&#10;&#10;  return true;&#10;}&#10;&#10;async function verifyOTP(email, otp) {&#10;  const result = await pool.query(&#10;    `SELECT * FROM otps WHERE lower(email) = lower($1) AND used = false ORDER BY created_at DESC LIMIT 1`,&#10;    [email]&#10;  );&#10;&#10;  if (result.rows.length === 0) {&#10;    throw new Error('No OTP request found for this email');&#10;  }&#10;&#10;  const otpRow = result.rows[0];&#10;  if (new Date(otpRow.expires_at) &lt; new Date()) {&#10;    throw new Error('OTP expired');&#10;  }&#10;&#10;  const isValid = await bcrypt.compare(otp, otpRow.otp_hash);&#10;  if (!isValid) {&#10;    throw new Error('Invalid OTP');&#10;  }&#10;&#10;  // Mark OTP as used&#10;  await pool.query(`UPDATE otps SET used = true, consumed_at = now() WHERE id = $1`, [otpRow.id]);&#10;&#10;  return true;&#10;}&#10;&#10;module.exports = { requestOTP, verifyOTP };&#10;" />
              <option name="updatedContent" value="const bcrypt = require('bcrypt');&#13;&#10;const pool = require('../config/db');&#13;&#10;const { generateOTP } = require('../utils/otpGenerator');&#13;&#10;const { sendEmail } = require('../utils/email');&#13;&#10;&#13;&#10;async function requestOTP(email) {&#13;&#10;  const otp = generateOTP();&#13;&#10;  const otpHash = await bcrypt.hash(otp, 10);&#13;&#10;  const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 minutes&#13;&#10;&#13;&#10;  await pool.query(&#13;&#10;    `INSERT INTO otps (email, otp_hash, expires_at) VALUES ($1, $2, $3)`,&#13;&#10;    [email.toLowerCase(), otpHash, expiresAt]&#13;&#10;  );&#13;&#10;&#13;&#10;  // Print OTP to console&#13;&#10;  console.log(`OTP for ${email}: ${otp}`);&#13;&#10;&#13;&#10;  // Try to send OTP via email&#13;&#10;  try {&#13;&#10;    await sendEmail(email, 'Your Quiz App OTP', `Your OTP is: ${otp} (valid for 5 minutes)`);&#13;&#10;    console.log(`OTP email sent successfully to ${email}`);&#13;&#10;  } catch (error) {&#13;&#10;    console.log(`Failed to send OTP email to ${email}:`, error.message);&#13;&#10;  }&#13;&#10;&#13;&#10;  return true;&#13;&#10;}&#13;&#10;&#13;&#10;async function verifyOTP(email, otp) {&#13;&#10;  const result = await pool.query(&#13;&#10;    `SELECT * FROM otps WHERE lower(email) = lower($1) AND used = false ORDER BY created_at DESC LIMIT 1`,&#13;&#10;    [email]&#13;&#10;  );&#13;&#10;&#13;&#10;  if (result.rows.length === 0) {&#13;&#10;    throw new Error('No OTP request found for this email');&#13;&#10;  }&#13;&#10;&#13;&#10;  const otpRow = result.rows[0];&#13;&#10;  if (new Date(otpRow.expires_at) &lt; new Date()) {&#13;&#10;    throw new Error('OTP expired');&#13;&#10;  }&#13;&#10;&#13;&#10;  const isValid = await bcrypt.compare(otp, otpRow.otp_hash);&#13;&#10;  if (!isValid) {&#13;&#10;    throw new Error('Invalid OTP');&#13;&#10;  }&#13;&#10;&#13;&#10;  // Mark OTP as used&#13;&#10;  await pool.query(`UPDATE otps SET used = true, consumed_at = now() WHERE id = $1`, [otpRow.id]);&#13;&#10;&#13;&#10;  return true;&#13;&#10;}&#13;&#10;&#13;&#10;module.exports = { requestOTP, verifyOTP };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>